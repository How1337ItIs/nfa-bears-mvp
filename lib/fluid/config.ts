// AUTHENTIC LIQUID LIGHT CONFIGURATION\n// Single source of truth for all physics parameters\n// Prevents aesthetic drift as system evolves\n\nexport interface DeviceCapabilities {\n  webgl: boolean;\n  webgl2: boolean;\n  maxTextureSize: number;\n  deviceMemory: number;\n  mobile: boolean;\n  tier: 'high' | 'medium' | 'low';\n  hardwareConcurrency: number;\n}\n\nexport interface AuthenticFluidConfig {\n  SIM_RESOLUTION: number;\n  DYE_RESOLUTION: number;\n  VELOCITY_DISSIPATION: number;   // Controls viscosity (lower = more viscous)\n  DENSITY_DISSIPATION: number;    // Controls color persistence (higher = longer lasting)\n  CURL: number;                   // Controls swirl intensity\n  PRESSURE_ITERATIONS: number;    // Controls boundary smoothness\n  COLOR_PALETTE: string[];        // Authentic 60s wavelengths\n  TRANSPARENT: boolean;\n  INITIAL: boolean;\n  HOVER: boolean;\n}\n\n// AUTHENTIC 60s PHYSICS PARAMETERS\n// Based on research of Joshua Light Show techniques\nexport const AUTHENTIC_CONFIGS: Record<'high' | 'medium' | 'low', AuthenticFluidConfig> = {\n  high: {\n    SIM_RESOLUTION: 256,\n    DYE_RESOLUTION: 512,\n    VELOCITY_DISSIPATION: 0.4,    // Lava lamp viscosity\n    DENSITY_DISSIPATION: 0.92,    // Color persistence\n    CURL: 20,                     // Organic movement\n    PRESSURE_ITERATIONS: 25,      // Smooth boundaries\n    COLOR_PALETTE: [\n      '#ff0066',  // Electric magenta - 650nm wavelength\n      '#00ffcc',  // Cyan-turquoise - 485nm wavelength  \n      '#ffff33',  // Electric yellow - 580nm wavelength\n      '#ff6600'   // Orange-red - 620nm wavelength\n    ],\n    TRANSPARENT: true,\n    INITIAL: true,\n    HOVER: true\n  },\n  \n  medium: {\n    SIM_RESOLUTION: 192,\n    DYE_RESOLUTION: 384,\n    VELOCITY_DISSIPATION: 0.4,\n    DENSITY_DISSIPATION: 0.92,\n    CURL: 20,\n    PRESSURE_ITERATIONS: 20,\n    COLOR_PALETTE: ['#ff0066', '#00ffcc', '#ffff33', '#ff6600'],\n    TRANSPARENT: true,\n    INITIAL: true,\n    HOVER: true\n  },\n  \n  low: {\n    SIM_RESOLUTION: 128,\n    DYE_RESOLUTION: 256,\n    VELOCITY_DISSIPATION: 0.5,    // Slightly more viscous for performance\n    DENSITY_DISSIPATION: 0.9,     // Slightly less persistent\n    CURL: 15,                     // Reduced complexity\n    PRESSURE_ITERATIONS: 15,      // Fewer iterations\n    COLOR_PALETTE: ['#ff0066', '#00ffcc', '#ffff33', '#ff6600'],\n    TRANSPARENT: true,\n    INITIAL: true,\n    HOVER: true\n  }\n};\n\n// CANONICAL COLOR PALETTES\n// Historically accurate thin-film interference colors\nexport const AUTHENTIC_PALETTES = {\n  'classic-60s': {\n    name: 'Classic 60s Oil-on-Water',\n    colors: ['#ff0066', '#00ffcc', '#ffff33', '#ff6600'],\n    wavelengths: [650, 485, 580, 620], // nanometers\n    description: 'Electric magenta, cyan-turquoise, electric yellow, orange-red'\n  },\n  \n  'grateful-dead': {\n    name: 'Grateful Dead Show Colors',\n    colors: ['#ff1744', '#00e5ff', '#ffea00', '#ff6f00'],\n    wavelengths: [645, 480, 575, 615],\n    description: 'Deep red, electric cyan, bright yellow, vivid orange'\n  },\n  \n  'joshua-light': {\n    name: 'Joshua Light Show Authentic',\n    colors: ['#e91e63', '#00bcd4', '#ffc107', '#ff5722'],\n    wavelengths: [640, 490, 585, 610],\n    description: 'Pink-magenta, light cyan, amber, red-orange'\n  }\n};\n\n// PERFORMANCE THRESHOLDS\n// FPS windows and quality adjustment parameters\nexport const PERFORMANCE_CONFIG = {\n  FPS_SAMPLE_INTERVAL: 60,        // Check FPS every N frames\n  DEGRADATION_THRESHOLD: 25,      // FPS below which to step down\n  IMPROVEMENT_THRESHOLD: 50,      // FPS above which to step up\n  DEGRADATION_DURATION: 2000,     // Milliseconds below threshold before action\n  IMPROVEMENT_DURATION: 3000,     // Milliseconds above threshold before action\n  MAX_VRAM_MB: 50,               // Target VRAM usage limit\n};\n\n// DEVICE CAPABILITY DETECTION\nexport function detectDeviceCapabilities(): DeviceCapabilities {\n  // Create test canvas for WebGL detection\n  const canvas = document.createElement('canvas');\n  const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n  const gl2 = canvas.getContext('webgl2');\n  \n  if (!gl) {\n    return {\n      webgl: false,\n      webgl2: false,\n      maxTextureSize: 0,\n      deviceMemory: 2,\n      mobile: true,\n      tier: 'low',\n      hardwareConcurrency: navigator.hardwareConcurrency || 2\n    };\n  }\n\n  // Device detection\n  const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n  const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  const deviceMemory = (navigator as any).deviceMemory || (isMobile ? 3 : 8);\n  const hardwareConcurrency = navigator.hardwareConcurrency || (isMobile ? 4 : 8);\n  \n  // Tier determination logic\n  let tier: 'high' | 'medium' | 'low' = 'low';\n  \n  if (!isMobile && maxTextureSize >= 4096 && deviceMemory >= 8 && hardwareConcurrency >= 8) {\n    tier = 'high';    // High-end desktop\n  } else if (maxTextureSize >= 2048 && deviceMemory >= 4 && hardwareConcurrency >= 4) {\n    tier = 'medium';  // Modern mobile/mid-range desktop\n  }\n  // else tier remains 'low' for limited devices\n\n  // Cleanup test canvas\n  canvas.remove();\n\n  return {\n    webgl: true,\n    webgl2: !!gl2,\n    maxTextureSize,\n    deviceMemory,\n    mobile: isMobile,\n    tier,\n    hardwareConcurrency\n  };\n}\n\n// QUALITY TIER ADJUSTMENT\n// Handles automatic stepping up/down based on performance\nexport function getConfigForTier(tier: 'high' | 'medium' | 'low'): AuthenticFluidConfig {\n  return AUTHENTIC_CONFIGS[tier];\n}\n\nexport function getNextLowerTier(currentTier: 'high' | 'medium' | 'low'): 'high' | 'medium' | 'low' | null {\n  const tierOrder = ['high', 'medium', 'low'];\n  const currentIndex = tierOrder.indexOf(currentTier);\n  return currentIndex < tierOrder.length - 1 ? tierOrder[currentIndex + 1] as any : null;\n}\n\nexport function getNextHigherTier(currentTier: 'high' | 'medium' | 'low', maxTier: 'high' | 'medium' | 'low'): 'high' | 'medium' | 'low' | null {\n  const tierOrder = ['low', 'medium', 'high'];\n  const currentIndex = tierOrder.indexOf(currentTier);\n  const maxIndex = tierOrder.indexOf(maxTier);\n  \n  return currentIndex < maxIndex ? tierOrder[currentIndex + 1] as any : null;\n}\n\n// AUDIO-TO-PHYSICS PARAMETER RANGES\n// Unified mapping specification - single source of truth\nexport const AUDIO_PHYSICS_MAPPING = {\n  SPLAT_FORCE: {\n    MIN: 8,     // Minimum splat intensity\n    MAX: 23,    // Maximum splat intensity\n    BASE: 5     // Base force when no audio\n  },\n  \n  THERMAL_RATE: {\n    MIN: 2,     // Minimum thermal events per 10 seconds\n    MAX: 8,     // Maximum thermal events per 10 seconds\n    BASE: 3     // Base rate when no audio\n  },\n  \n  COLOR_PHASE: {\n    MIN: 0,           // Minimum color phase shift\n    MAX: Math.PI * 2, // Maximum color phase shift (full rotation)\n    BASE: 0           // Base phase when no audio\n  },\n  \n  GLOBAL_INTENSITY: {\n    MIN: 0.4,   // Minimum overall intensity (prevents invisible effects)\n    MAX: 1.0,   // Maximum overall intensity\n    BASE: 0.6   // Base intensity when no audio\n  }\n};\n\n// THERMAL CONVECTION PARAMETERS\nexport const THERMAL_CONFIG = {\n  INTERVAL_MIN: 3000,           // Minimum milliseconds between thermal events\n  INTERVAL_VARIATION: 2000,     // Additional random variation\n  FORCE_MIN: 15,               // Minimum upward force\n  FORCE_VARIATION: 10,         // Additional random force\n  BOTTOM_ZONE: 0.2,            // Bottom 20% of canvas for thermal origin\n  THERMAL_COLOR: [1, 0.8, 0.2] // Warm orange-yellow thermal color\n};\n\n// GLOBAL MOTION PARAMETERS\nexport const MOTION_CONFIG = {\n  ROTATION_SPEED: 0.01,         // Radians per frame for global rotation\n  ROTATION_RADIUS: 0.3,         // Fraction of canvas size for rotation radius\n  ROTATION_FORCE: 2,            // Force strength for rotational splats\n  ROTATION_COLOR: [0.5, 0.5, 0.5], // Neutral gray for rotation splats\n  ROTATION_INTERVAL: 1000       // Milliseconds between rotation splats\n};\n\nexport type { AuthenticFluidConfig };\n"